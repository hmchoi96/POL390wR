p("p creates a paragraph of text."),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code")
)
)
)
#define server logic
server <- function(input, output) {
}
#run the app
shinyApp(ui = ui, server = server)
#define UI
ui <- fluidPage(
titlePanel("titlePanel"),
## shiny generally follow javascript
sidebarLayout( position = "left",
sidebarPanel("sidebarPanel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h6("Sixth level title", align = "center"),
p("p creates a paragraph of text. Supply a style attribute
to change the format of the entire paragraph,", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style.")
)
)
)
#define server logic
server <- function(input, output) {
}
#run the app
shinyApp(ui = ui, server = server)
#define UI
ui <- fluidPage(
titlePanel("titlePanel"),
## shiny generally follow javascript
sidebarLayout( position = "left",
sidebarPanel("sidebarPanel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h6("Sixth level title", align = "center"),
p("p creates a paragraph of text. Supply a style attribute
to change the format of the entire paragraph,", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'syle = color:blue' to div", style = "color:blue")
)
)
)
#define server logic
server <- function(input, output) {
}
#run the app
shinyApp(ui = ui, server = server)
#define UI
ui <- fluidPage(
titlePanel("titlePanel"),
## shiny generally follow javascript
sidebarLayout( position = "left",
sidebarPanel("sidebarPanel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h6("Sixth level title", align = "center"),
p("p creates a paragraph of text. Supply a style attribute
to change the format of the entire paragraph,", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'syle = color:blue' to div", style = "color:blue",
em("div can do this too"))
)
)
)
#define server logic
server <- function(input, output) {
}
#run the app
shinyApp(ui = ui, server = server)
#define UI
ui <- fluidPage(
titlePanel("titlePanel"),
## shiny generally follow javascript
sidebarLayout( position = "left",
sidebarPanel("sidebarPanel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h6("Sixth level title", align = "center"),
p("p creates a paragraph of text. Supply a style attribute
to change the format of the entire paragraph,", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'syle = color:blue' to div", style = "color:blue",
br(),
em("div can do this too"))
p("span does the same thing as div, but it works with",
#define UI
ui <- fluidPage(
titlePanel("titlePanel"),
## shiny generally follow javascript
sidebarLayout( position = "left",
sidebarPanel("sidebarPanel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h6("Sixth level title", align = "center"),
p("p creates a paragraph of text. Supply a style attribute
to change the format of the entire paragraph,", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'syle = color:blue' to div", style = "color:blue",
br(),
em("div can do this too")
),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:red"),
"that appear inside a paragraph")
)
)
)
#define server logic
server <- function(input, output) {
}
#run the app
shinyApp(ui = ui, server = server)
library(rmarkdown)
library(tidyverse)
library(janitor)
getwd()
setwd("/Users/hyunmyungchoi/study_R/POL390")
#Notice the difference in read csv functions
# Previously used: dat <- read.csv("anes_timeseries_2020/anes_timeseries_2020_csv_20220210.csv")
dat <- read.csv("anes_timeseries_2020_csv_20220210.csv") #If this doesn't work your tidyverse library didn't load
head(dat)
#Previously, you worked on Trump vote. That is variable V202073: VoteTrump <- dat$V202073
#Instead, we can select many variables at once. Let's select 2020 vote choice, 2016 vote choice, racial identity and authoritarianism; Joe Biden feeling thermometer, Trump thermometer
minidat<- dat %>% select(V202073, V201103, V201549x, V201151, V201152)
glimpse(minidat)
# Remember to check your variables
table(minidat$V202073)
# Alternatively, pipe it!
minidat$V202073 %>% table()
#Let's rename the variables first
# The format for rename is New name = old name. Don't worry, you don't have to memorize it. Use ?rename to read the help file for a reminder, or press your tab key when you type the function
#We can do many renames at the same time
minidat <- minidat %>% rename(Vote2020 = V202073, Vote2016 = V201103,
race = V201549x, FeelingBiden = V201151, FeelingTrump = V201152)
glimpse(minidat)
#Now let's recode the variables.
#Recode has the opposite order, which the tidyverse people are self consious of. It is old name = new name
# Recode V202073 POST: FOR WHOM DID R VOTE FOR PRESIDENT, #1. Joe Biden, 2. Donald Trump
minidat$Vote2020 %>% recode("1" = "Biden", "2" = "Trump",
.default = NA_character_)
#What happened? We need to remember to assign our pipe
minidat$Vote2020 <- minidat$Vote2020 %>% recode("1" = "Biden", "2" = "Trump",
.default = NA_character_) #all the other candidates don't matter to us.
glimpse(minidat) #chr
#let's turn it into a factor
minidat$Vote2020 <- minidat$Vote2020 %>% as_factor() #as_factor instead of as.factor works the same but keeps the factors ordered how they are created.
#You can also link pipes together. For example, if you ran this instead:
#minidat$Vote2020 <- minidat$Vote2020 %>% recode("1" = "Biden", "2" = "Trump",
#                             .default = NA_character_)  %>% as_factor()
#But don't run this because you have already recoded so if it can't find a 1 or 2 it will turn all into NA
#We can also recode as factor in the pipe using the recode_factor version. Let's recode the 2016 Trump vote, where 1 is now HClinton.
minidat$Vote2016 <- minidat$Vote2016 %>% recode_factor("1" = "HClinton", "2" = "Trump",
.default = NA_character_) #all the other candidates don't matter to us.
glimpse(minidat) #Check your changes are saving.
#Let's recode race, where we have more than two categories that we do care about.
#Q: I am going to read you a list of five race categories. You may choose one or more races. For this survey, Hispanic origin is not a race. Are you White; Black or African American; American Indian or Alaska Native; Asian; or Native Hawaiian or Other Pacific Islander? Variable V201549x summarizes the responses: -9. Refused and -8. Donâ€™t know
# 1. White, non-Hispanic 2. Black, non-Hispanic 3. Hispanic 4. Asian or Native Hawaiian/other Pacific Islander, non-Hispanic alone 5. Native American/Alaska Native or other race, non-Hispanic alone 6. Multiple races, non-Hispanic
# Remember to check your variables
table(minidat$V202073)
# Alternatively, pipe it!
minidat$V202073 %>% table()
#Let's rename the variables first
# The format for rename is New name = old name. Don't worry, you don't have to memorize it. Use ?rename to read the help file for a reminder, or press your tab key when you type the function
#We can do many renames at the same time
minidat <- minidat %>% rename(Vote2020 = V202073, Vote2016 = V201103,
race = V201549x, FeelingBiden = V201151, FeelingTrump = V201152)
# Remember to check your variables
table(minidat$V202073)
# Alternatively, pipe it!
minidat$V202073 %>% table()
#Let's rename the variables first
# The format for rename is New name = old name. Don't worry, you don't have to memorize it. Use ?rename to read the help file for a reminder, or press your tab key when you type the function
#We can do many renames at the same time
minidat <- minidat %>% rename(Vote2020 = V202073, Vote2016 = V201103,
race = V201549x, FeelingBiden = V201151, FeelingTrump = V201152)
glimpse(minidat) #Check your changes are saving.
# install.packages("ISLR")
library(ISLR)
data(Wage)
data
# type answer here
head(Wage)
summary(Wage)
# type answer here
head(Wage)
# type answer here
head(Wage)
summary(Wage)
# type answer here
head(Wage)
# type answer here
summary(Wage)
propMarried <- 2074/(648+2074+19+204+55)
print(propMarried)
propMarried <- (2074/(648+2074+19+204+55)) * 100
print(propMarried)
# type answer here
summary(Wage)
print(propIndust)
propIndust <- (1544/(1544+1456))*100
print(propIndust)
#Notice the difference in read csv functions
# Previously used: dat <- read.csv("anes_timeseries_2020/anes_timeseries_2020_csv_20220210.csv")
dat <- read_csv("anes_timeseries_2020_csv_20220210.csv") #If this doesn't work your tidyverse library didn't load
getwd()
setwd("/Users/hyunmyungchoi/study_R/POL390")
#Notice the difference in read csv functions
# Previously used: dat <- read.csv("anes_timeseries_2020/anes_timeseries_2020_csv_20220210.csv")
dat <- read_csv("anes_timeseries_2020_csv_20220210.csv") #If this doesn't work your tidyverse library didn't load
library(dbplyr)
#Previously, you worked on Trump vote. That is variable V202073: VoteTrump <- dat$V202073
#Instead, we can select many variables at once. Let's select 2020 vote choice, 2016 vote choice, racial identity and authoritarianism; Joe Biden feeling thermometer, Trump thermometer
minidat <- dat %>% select(V202073, V201103, V201549x, V201151, V201152)
glimpse(minidat)
# Remember to check your variables
table(minidat$V202073)
# Alternatively, pipe it!
minidat$V202073 %>% table()
#We can do many renames at the same time
minidat <- minidat %>% rename(Vote2020 = V202073, Vote2016 = V201103,
race = V201549x, FeelingBiden = V201151,
FeelingTrump = V201152)
glimpse(minidat)
# Alternatively, pipe it!
minidat$V202073 %>% table()
# Alternatively, pipe it!
minidat$V202073 %>% table()
#We can do many renames at the same time
minidat <- minidat %>% rename(Vote2020 = V202073, Vote2016 = V201103,
race = V201549x, FeelingBiden = V201151,
FeelingTrump = V201152)
glimpse(minidat)
minidat$Vote2020 %>% table()
#Now let's recode the variables.
#Recode has the opposite order, which the tidyverse people are self consious of. It is old name = new name
# Recode V202073 POST: FOR WHOM DID R VOTE FOR PRESIDENT, #1. Joe Biden, 2. Donald Trump
?recode
minidat$Vote2020 %>% table()
minidat$Vote2020 %>% recode("1" = "Biden", "2" = "Trump",
.default = NA_character_)
glimpse(minidat) #chr
#let's turn it into a factor
minidat$Vote2020 <- minidat$Vote2020 %>% as_factor() #as_factor instead of as.factor works the same but keeps the factors ordered how they are created.
#We can also recode as factor in the pipe using the recode_factor version. Let's recode the 2016 Trump vote, where 1 is now HClinton.
minidat$Vote2016 <- minidat$Vote2016 %>% recode_factor("1" = "HClinton", "2" = "Trump",
.default = NA_character_) #all the other candidates don't matter to us.
glimpse(minidat) #Check your changes are saving.
#recode here
minidat$race <- minidat$race %>% recode_factor("1" = "white",
"2" = "Black",
"3" = "Hispanic",
"4" = "AANHPI",
"5" = "Indigenous",
"6" = "Multiple categories",
.default = NA_character_)
glimpse(minidat)
#Now, let's recode the feeling thermometers, where respondents rate Biden and Trump.
minidat$FeelingBiden %>% summary()
#Note the unusual values.
#From the codebook: 998. Donâ€™t know (donâ€™t know where to rate), -9. Refused and -4. Technical error
if_else(minidat$FeelingBiden < 0 | minidat$FeelingBiden > 100, true= NA_real_, false = minidat$FeelingBiden)
#Note the unusual values.
#From the codebook: 998. Donâ€™t know (donâ€™t know where to rate), -9. Refused and -4. Technical error
if_else(minidat$FeelingBiden < 0 | minidat$FeelingBiden > 100, true= NA_real_, false = minidat$FeelingBiden)
#Note the unusual values.
#From the codebook: 998. Donâ€™t know (donâ€™t know where to rate), -9. Refused and -4. Technical error
if_else(minidat$FeelingBiden < 0 | minidat$FeelingBiden > 100, true= NA_real_, false = minidat$FeelingBiden)%>% summary()
#this looks better.
#Let's assign that code to itself, remember to take out the summary pipe
minidat$FeelingBiden <- if_else(minidat$FeelingBiden<0 | minidat$FeelingBiden>100, NA_real_, minidat$FeelingBiden)
#Now look at the Trump rating.
#Don't know where to rate is gone, we only have people who refuse to say!
minidat$FeelingTrump %>% summary()
minidat$FeelingTrump %>%  if_else(minidat$FeelingTrump<0 | minidat$FeelingTrump>100, true=NA_real_, false=minidat$FeelingTrump)
glimpse(minidat)
minidat$FeelingTrump %>%  if_else(minidat$FeelingTrump<0 | minidat$FeelingTrump>100, true=NA_real_, false=minidat$FeelingTrump)
minidat$FeelingTrump %>%  if_else(minidat$FeelingTrump<0 | minidat$FeelingTrump>100, NA_real_, minidat$FeelingTrump)
minidat$FeelingTrump %>%  if_else(minidat$FeelingTrump<0 | minidat$FeelingTrump>100, NA_real_, minidat$FeelingTrump)
glimpse(minidat)
minidat$FeelingTrump2 <- if_else(minidat$FeelingTrump < 50, true="dislike", false="like",
missing = "refused")
minidat$FeelingTrump2 %>% table()
minidat %>% ggplot(aes(x = Vote2020))+
geom_bar()+
labs(x = "2020 Vote", y = "Count")
#library(ggplot2) #ggplot2 is part of the tidyverse so if you load tidyverse you can skip loading ggplot2 again.
minidat %>% ggplot(aes(x = Vote2020))+
geom_bar()+
labs(x = "2020 Vote", y = "Count")
#add proportions with ..prop.. and group = 1 or ..count../sum(..count..)
#Use the group_by to calculate averages for groups.
# We can plot grouped averages.
#For example, 2020 Vote choice by Trump 2020 rating, viewed as a point
minidat %>% group_by(Vote2020) %>%
summarise(average = mean_se(FeelingTrump)) %>%
arrange(average$y) %>% ggplot(aes(x = Vote2020, y = average$y))+
geom_point(size = 4)+
labs(x = "2020 Vote", y = "Average Trump rating")
#Violin plots summarize the distribution of the variables, including the average, like the boxplots you used last week
#They need a categorical and a numeric variable.
#Let's code the distribution the 2016 vote against the Trump rating, and color code by the vote
minidat %>% ggplot(aes(x = Vote2016, y= FeelingTrump, color = Vote2016, fill = Vote2016)) +
geom_violin()
# The NA variable can be excluded several ways. You don't want to delete these respondents, you can filter them out before plotting by adding a filter pipe.
minidat %>% ggplot(aes(x = Vote2020))+
geom_bar()+
labs(x = "2020 Vote", y = "Count")
minidat %>% ggplot(aes(x = Vote2020))+
geom_bar()+
labs(x = "2020 Vote", y = "Count")
#library(ggplot2) #ggplot2 is part of the tidyverse so if you load tidyverse you can skip loading ggplot2 again.
minidat %>% ggplot(aes(x = Vote2020))+
geom_bar()+
labs(x = "2020 Vote", y = "Count")
#add proportions with ..prop.. and group = 1 or ..count../sum(..count..)
minidat %>% ggplot(aes(x = Vote2020, y = ..prop.., group = 1), stat = "count") +
geom_bar()+
#scale_y_continuous(labels = scales::percent_format())+ #remove comment to add % format
labs(x = "2020 Vote", y = "Proportion") +
scale_y_continuous(labels = scales::percent_format())
#add proportions with ..prop.. and group = 1 or ..count../sum(..count..)
minidat %>% ggplot(aes(x = Vote2020, y = ..prop.., group = 1), stat = "count") +
geom_bar()+
#scale_y_continuous(labels = scales::percent_format())+ #remove comment to add % format
labs(x = "2020 Vote", y = "Proportion") +
scale_y_continuous(labels = scales::percent_format())
# We can plot grouped averages.
#For example, 2020 Vote choice by Trump 2020 rating, viewed as a point
minidat %>% group_by(Vote2020) %>%
summarise(average = mean_se(FeelingTrump)) %>%
arrange(average$y) %>% ggplot(aes(x = Vote2020, y = average$y))+
geom_point(size = 4)+
labs(x = "2020 Vote", y = "Average Trump rating")
#Violin plots summarize the distribution of the variables, including the average, like the boxplots you used last week
#They need a categorical and a numeric variable.
#Let's code the distribution the 2016 vote against the Trump rating, and color code by the vote
minidat %>% ggplot(aes(x = Vote2016, y= FeelingTrump, color = Vote2016, fill = Vote2016)) +
geom_violin()
#Violin plots summarize the distribution of the variables, including the average, like the boxplots you used last week
#They need a categorical and a numeric variable.
#Let's code the distribution the 2016 vote against the Trump rating, and color code by the vote
minidat %>% ggplot(aes(x = Vote2016, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+   ## pre-set palette
scale_fill_brewer(palette="Dark2")
# The NA variable can be excluded several ways. You don't want to delete these respondents, you can filter them out before plotting by adding a filter pipe.
minidat %>% filter(!is.na(Vote2016)) %>%
ggplot(aes(x = Vote2016, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
#Similarly, you can use filter to focus on specific groups or values.
minidat$race %>% table
minidat %>% filter(race %in% c("Black", "Hispanic", "White"))  %>%
ggplot(aes(x = race, y = FeelingTrump, color = Vote2016, fill = Vote2016)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette="Dark2")
minidat %>% filter(race %in% c("Black", "Hispanic")) %>%
ggplot(aes(x = race, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
minidat %>% filter(race %in% c("Black", "Hispanic")) %>%
ggplot(aes(x = race, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
# The NA variable can be excluded several ways. You don't want to delete these respondents, you can filter them out before plotting by adding a filter pipe.
minidat %>% filter(!is.na(Vote2016)) %>%
ggplot(aes(x = Vote2016, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
#Violin plots summarize the distribution of the variables, including the average, like the boxplots you used last week
#They need a categorical and a numeric variable.
#Let's code the distribution the 2016 vote against the Trump rating, and color code by the vote
minidat %>% ggplot(aes(x = Vote2016, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+   ## pre-set palette
scale_fill_brewer(palette="Dark2")
# The NA variable can be excluded several ways. You don't want to delete these respondents, you can filter them out before plotting by adding a filter pipe.
minidat %>% filter(!is.na(Vote2016)) %>%
ggplot(aes(x = Vote2016, y = FeelingTrump, color = Vote2016, fill = Vote2016))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
glimpse(Vote2020)
glimpse(minidat$Vote2020)
glimpse(minidat)
#Let's #use drop_na instead of filter this time. This time, I'm assigning it to a variable
TrumpRate <- minidat %>% drop_na(Vote2020) %>%
ggplot(aes(x = Vote2020, y = FeelingTrump, color = Vote2020, fill = Vote2020))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
#Let's #use drop_na instead of filter this time. This time, I'm assigning it to a variable
TrumpRate <- minidat %>% drop_na(Vote2020) %>%
ggplot(aes(x = Vote2020, y = FeelingTrump, color = Vote2020, fill = Vote2020))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
TrumpRate
library(lubridate)
# type answer here
icosahedron <- c(1:20)
percent <- 1/length(icosahedron)
expX <- sum(icosahedron*percent)
print(expX)
print(round((230/2158),3 ))
print(round((711/2158),3))
print(round((22/2158),3))
print(round(((230+711+22/2158),3))
print(round(((230+711+22/2158),3))
print(round(((230+711+22/2158),3)))
print(round((230+711+22/2158),3)))
print(round((230+711+22/2158),3))
print(round((230+711+22/2158),3))
print(round((230+711+22)/2158),3))
print(round(((230+711+22)/2158),3))
print(round((859/2158),3))
print(round(((316)/2158),3))
print(round((20/2158),3))
print(round(((316+859+20)/2158),3))
# type answer here
#\mathbb{P}(X=1|Y=1)
print(round((0.398/0.727),3)
# type answer here
#\mathbb{P}(X=1|Y=1)
print(round((0.398/0.727),3))
# type answer here
#mathbb{P}(X=1|Y=1)
print(round((0.398/0.727),3))
#mathbb{P}(X=1|Y=0)
print(round((0.146/0.253),3))
#mathbb{P}(X=1|Y=2)
print(round((0.009/0.019),3))
# type answer here
#mathbb{P}(X=1|Y=1)
p11 <- round((0.398/0.727),3)
print(p11)
#mathbb{P}(X=1|Y=0)
p10 <- round((0.146/0.253),3)
print(p10)
#mathbb{P}(X=1|Y=2)
p12 <- round((0.009/0.019),3)
print(p12)
#mathbb{P}(X=1|Y=1)
p00 <- round((0.398/0.727),3)
#mathbb{P}(X=0|Y=2)
p02 <- round((0.01/0.019),3)
print(p01\np00\np02)
print(p01/np00/np02)
# type answer here
#mathbb{P}(X=0|Y=1)
p01 <- round((0.329/0.727),3)
print(p01/np00/np02)
# type answer here
#mathbb{P}(X=0|Y=1)
p01 <- round((0.329/0.727),3)
#mathbb{P}(X=0|Y=0)
p00 <- round((0.107/0.253),3)
#mathbb{P}(X=0|Y=2)
p02 <- round((0.01/0.019),3)
print(p01)
print(p00)
print(p02)
# type answer here
Ex0 <- p00*0 + p10*1
Ex1 <- p01*0 + p11*1
Ex2 <- p02*0 + p12*1
# type answer here
Ex0 <- p00*0 + p10*1
Ex1 <- p01*0 + p11*1
Ex2 <- p02*0 + p12*1
print(Ex0)
print(Ex1)
print(Ex2)
shiny::runApp('App-1')
shiny::runApp()
runApp()
shiny::runApp()
runApp('census-app/app.r')
runApp('~/study_R/POL390/census-app')
runApp()
