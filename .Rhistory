geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green Party"), color = "green", alpha = 0.5) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Percentage") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
ggplot() +
geom_histogram(data = voteforAFD, aes(x = agea, fill = "AfD"), color = "red", alpha = 0.5) +
geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green"), color = "green", alpha = 0.5) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Percentage") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
ggplot() +
geom_histogram(data = voteforAFD, aes(x = agea, fill = "AfD"), color = "red", alpha = 1) +
geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green"), color = "green", alpha = 1) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Percentage") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
ggplot() +
geom_histogram(data = voteforAFD, aes(x = agea, fill = "AfD"), color = "red", alpha = 0.2) +
geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green"), color = "green", alpha = 0.2) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Percentage") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
ggplot() +
geom_histogram(data = voteforAFD, aes(x = agea, fill = "AfD"), color = "red", alpha = 0.4) +
geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green"), color = "green", alpha = 0.2) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Percentage") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
ggplot() +
geom_histogram(data = voteforAFD, aes(x = agea, fill = "AfD"), color = "red", alpha = 0.4) +
geom_histogram(data = voteforGreen, aes(x = agea, fill = "Green"), color = "green", alpha = 0.2) +
labs(title = "Age Distribution of AfD and Green Party Voters", x="Age", y="Frequency") +
scale_fill_manual(values = c("AfD" = "red", "Green" = "green")) +
theme(aspect.ratio = 1)
glimpse(data$gender)
library("haven")
library("ggplot2")
library("tidyverse")
barplot <- ggplot(topFive, aes(x = party_name)) +
geom_bar(aes(y = survey_v1, fill = "Survey Percentage", alpha=0.2), stat = "identity", position = "dodge") +
geom_bar(aes(y = vote1_perc, fill = "Actual Percentage", alpha=0.4), stat = "identity", position = "dodge") +
labs(x = "Party", y = "Percentage") +
scale_fill_manual(values = c("blue", "red"), labels = c("Actual Percentage", "Survey Percentage")) +
theme(aspect.ratio = 0.5)
barplot
print(barplot)
barplot <- ggplot(topFive, aes(x = party_name)) +
geom_bar(aes(y = survey_v1, fill = "Survey Percentage", width=0.2), stat = "identity", position = "dodge") +
geom_bar(aes(y = vote1_perc, fill = "Actual Percentage", width=0.4), stat = "identity", position = "dodge") +
labs(x = "Party", y = "Percentage") +
scale_fill_manual(values = c("blue", "red"), labels = c("Actual Percentage", "Survey Percentage")) +
theme(aspect.ratio = 0.5)
print(barplot)
barplot <- ggplot(topFive, aes(x = party_name)) +
geom_bar(aes(y = survey_v1, fill = "Survey Percentage", alpha=0.5), stat = "identity", position = "dodge") +
geom_bar(aes(y = vote1_perc, fill = "Actual Percentage", alpha=0.5), stat = "identity", position = "dodge") +
labs(x = "Party", y = "Percentage") +
scale_fill_manual(values = c("blue", "red"), labels = c("Actual Percentage", "Survey Percentage")) +
theme(aspect.ratio = 0.5)
print(barplot)
barplot <- ggplot(topFive, aes(x = party_name)) +
geom_bar(aes(y = survey_v1, fill = "Survey Percentage", width=0.6), stat = "identity", position = "dodge") +
geom_bar(aes(y = vote1_perc, fill = "Actual Percentage", width=0.3), stat = "identity", position = "dodge") +
labs(x = "Party", y = "Percentage") +
scale_fill_manual(values = c("blue", "red"), labels = c("Actual Percentage", "Survey Percentage")) +
theme(aspect.ratio = 0.5)
print(barplot)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# Create a box plot
data %>%
ggplot(aes(x = "", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# Create a box plot
data %>%
ggplot(aes(x = "", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
label(x = "feeling")
# Create a box plot
data %>%
ggplot(aes(x = "", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
labels(x = "feeling")
# Create a box plot
data %>%
ggplot(aes(x = "Feeling", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists, group=gender)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists, group=gender)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_x_discrete(labels = c("1" = "Man", "2" = "Woman")) +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data$gender
summary(data$gender)
# code here
data <- read_dta("ces2019_ps1.dta")
summary(data$gender)
# Create a box plot
data %>%
ggplot(aes(x = "Feeling", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
gender
data$gender
# Create a box plot
data %>%
ggplot(aes(x = "Feeling", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# Create a data frame with the variable
summary(data$feel_feminists)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
# code here
data$gender <- factor(data$gender, labels=c("Man", "Woman"))
# code here
data <- read_dta("ces2019_ps1.dta")
summary(data$gender)
data$gender <- factor(data$gender, labels=c("Man", "Woman"), levels=c(1,2))
gender
data$gender
ggplot(data, aes(x=gender, y = (after_stat(count)/sum(after_stat(count))*100))) +
labs(x = "Gender", y="Distribution of Gender(%)") +
geom_bar(fill="skyblue", color="white") +
theme(aspect.ratio = 1,
axis.title = element_text(size= 14),
axis.text.x = element_text(size = 12))
# Create a data frame with the variable
summary(data$feel_feminists)
# Create a box plot
data %>%
ggplot(aes(x = "Feeling", y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
data %>%
ggplot(aes(x = gender, y = feel_feminists)) +
geom_violin() +
labs(x = "Feeling towards the feminist movement", y = "0 to 100") +
stat_summary(fun = mean, geom = "point", shape = 20, color = "red", size = 3) +
stat_summary(fun = median, geom = "point", shape = 8, color = "blue", size = 3)
#the last condition always has to be TRUE ~ and an answer.
#Counterituitively, TRUE is actually False, meaning, what happens if none of the conditions above are satisfied.
#We can also calculate the difference in ratings between Trump and Biden in mutate
#Call it `Thermometer difference`, and calculate so positive Trump<Biden, negative means Biden>Trump
minidat %>%
mutate(
Votes = case_when(
Vote2016 == "Trump" & Vote2020 == "Trump" ~ "Loyal Trumper",
Vote2016 == "HClinton" & Vote2020 == "Biden" ~ "Never Trumper",
Vote2016 == "Trump" & Vote2020 == "Biden" ~ "Regretful switch",
Vote2016 == "HClinton" & Vote2020 == "Trump" ~ "Subversive switch",
TRUE ~ NA_character_),
`Thermometer difference` = FeelingTrump-FeelingBiden) %>%
group_by(Votes) %>%
group_modify(~ mean_se(.x$`Thermometer difference`))
#the last condition always has to be TRUE ~ and an answer.
#Counterituitively, TRUE is actually False, meaning, what happens if none of the conditions above are satisfied.
#We can also calculate the difference in ratings between Trump and Biden in mutate
#Call it `Thermometer difference`, and calculate so positive Trump<Biden, negative means Biden>Trump
minidat %>%
mutate(
Votes = case_when(
Vote2016 == "Trump" & Vote2020 == "Trump" ~ "Loyal Trumper",
Vote2016 == "HClinton" & Vote2020 == "Biden" ~ "Never Trumper",
Vote2016 == "Trump" & Vote2020 == "Biden" ~ "Regretful switch",
Vote2016 == "HClinton" & Vote2020 == "Trump" ~ "Subversive switch",
TRUE ~ NA_character_),
`Thermometer difference` = FeelingTrump-FeelingBiden) %>%
group_by(Votes) %>%
group_modify(~ mean_se(.x$`Thermometer difference`))
#Now, let's recode the feeling thermometers, where respondents rate Biden and Trump.
minidat$FeelingBiden %>% summary()
#Note the unusual values.
#From the codebook: 998. Don’t know (don’t know where to rate), -9. Refused and -4. Technical error
#if_else(minidat$FeelingBiden < 0 | minidat$FeelingBiden > 100, true= NA_real_, false = minidat$FeelingBiden)%>% summary()
#this looks better.
#Let's assign that code to itself, remember to take out the summary pipe
#minidat$FeelingBiden <- if_else(minidat$FeelingBiden<0 | minidat$FeelingBiden>100, NA_real_, minidat$FeelingBiden)
#Now look at the Trump rating.
#Don't know where to rate is gone, we only have people who refuse to say!
#minidat$FeelingTrump %>% summary()
#minidat$FeelingTrump %>%  if_else(minidat$FeelingTrump<0 | minidat$FeelingTrump>100, NA_real_, minidat$FeelingTrump)
glimpse(minidat)
#The package cowplot lets you combine plots if you assign them as objects.
#you'll need to install cowplot if you want to try this later.
cowplot::plot_grid(TrumpRate, BidenRate)
#Let's #use drop_na instead of filter this time. This time, I'm assigning it to a variable
TrumpRate <- minidat %>% drop_na(Vote2020) %>%
ggplot(aes(x = Vote2020, y = FeelingTrump, color = Vote2020, fill = Vote2020))+
geom_violin() +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
#The package cowplot lets you combine plots if you assign them as objects.
#you'll need to install cowplot if you want to try this later.
cowplot::plot_grid(TrumpRate, BidenRate)
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
data(congress, package = "qss")
rep <- subset(congress, subset = (party == "Republican"))
dem <- congress[congress$party == "Democrat", ]
rep80 <- subset(rep, subset = (congress == 80))
dem80 <- subset(dem, subset = (congress == 80))
rep112 <- subset(rep, subset = (congress == 112))
dem112 <- subset(dem, subset = (congress == 112))
xlab <- "Economic liberalism/conservatism"
ylab <- "Racial liberalism/conservatism"
dwnom80 <- cbind(congress$dwnom1[congress$congress == 80],
congress$dwnom2[congress$congress == 80])
dwnom112 <- cbind(congress$dwnom1[congress$congress == 112],
congress$dwnom2[congress$congress == 112])
lim <- c(-1.5, 1.5)
## k-means with 2 clusters:
# 80th Congress
# due to diminishing return, usually use nstart = 5
k80two.out <- kmean(dwnom80, centers = 2, nstart = 5)
## k-means with 2 clusters:
# 80th Congress
# due to diminishing return, usually use nstart = 5
k80two.out <- kmeans(dwnom80, centers = 2, nstart = 5)
k80two.out
# 112th Congress
k112two.out <- kmeans(dwnom112, centers = 2, nstart = 5)
k112two.out
names(k112two.out)
## final centroids
k80two.out$centers
## final centroids
k80two.out$cluster
k80two.out$centers
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80two.out)
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80two.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112two.out$cluster)
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80two.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112two.out$cluster)
## final centroids
k80two.out$cluster
k80two.out$centers
dwnom112
dwnom80
dwnom80 <- cbind(congress$dwnom1[congress$congress == 80],
congress$dwnom2[congress$congress == 80])
## k-means with 4 clusters:
k80two.out <- kmeans(dwnom80, centers = 4, nstart = 5)
k80two.out
k112two.out <- kmeans(dwnom112, centers = 4, nstart = 5)
k112two.out
k80two.out$cluster
k80two.out$centers
table(party = congress$party[congress$congress == 80], cluster = k80two.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112two.out$cluster)
## k-means with 4 clusters:
k80four.out <- kmeans(dwnom80, centers = 4, nstart = 5)
k112four.out <- kmeans(dwnom112, centers = 4, nstart = 5)
## final centroids
k80four.out$cluster
k80four.out$centers
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80four.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112four.out$cluster)
## k-means with 2 clusters:
# 80th Congress
# due to diminishing return, usually use nstart = 5
k80two.out <- kmeans(dwnom80, centers = 2, nstart = 5)
# 112th Congress
k112two.out <- kmeans(dwnom112, centers = 2, nstart = 5)
names(k112two.out)
## final centroids
k80two.out$cluster
k80two.out$centers
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80two.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112two.out$cluster)
## plotting the results using the labels and limits defined earlier
plot(dwnom80, col = k80two.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
## plotting the centroids
pomts(k80two.out$centers, pch = 8, cex = 2)
## plotting the centroids
pomt(k80two.out$centers, pch = 8, cex = 2)
## plotting the centroids
points(k80two.out$centers, pch = 8, cex = 2)
## plotting the results using the labels and limits defined earlier
plot(dwnom80, col = k80two.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
## plotting the centroids
points(k80two.out$centers, pch = 8, cex = 2)
## plotting the results using the labels and limits defined earlier
plot(dwnom80, col = k80two.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
plot(dwnom80, col = k80two.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
## plotting the centroids
points(k80two.out$centers, pch = 8, cex = 2)
plot(dwnom112, col = k112two.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "112th Congress")
points(k112two.out$centers, pch = 8, cex = 2)
## plotting the results using the labels and limits defined earlier
plot(dwnom80, col = k80four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
plot(dwnom80, col = k80four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
points(k80four.out$centers, pch = 8, cex = 2)
## 112th Congress
plot(dwnom112, col = k112four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "112th Congress")
plot(dwnom112, col = k112four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "112th Congress")
points(k112four.out$centers, pch = 8, cex = 2)
k80four.out <- kmeans(dwnom80, centers = 6, nstart = 5)
k112four.out <- kmeans(dwnom112, centers = 6, nstart = 5)
table(party = congress$party[congress$congress == 80], cluster = k80four.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112four.out$cluster)
plot(dwnom80, col = k80four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
points(k80four.out$centers, pch = 8, cex = 2)
k80four.out <- kmeans(dwnom80, centers = 8, nstart = 5)
k112four.out <- kmeans(dwnom112, centers = 8, nstart = 5)
table(party = congress$party[congress$congress == 80], cluster = k80four.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112four.out$cluster)
plot(dwnom112, col = k112four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "112th Congress")
points(k112four.out$centers, pch = 8, cex = 2)
```
## k-means with 4 clusters:
k80four.out <- kmeans(dwnom80, centers = 4, nstart = 5)
k112four.out <- kmeans(dwnom112, centers = 4, nstart = 5)
## final centroids
k80four.out$cluster
k80four.out$centers
## number of observations for each cluster by party
table(party = congress$party[congress$congress == 80], cluster = k80four.out$cluster)
table(party = congress$party[congress$congress == 112], cluster = k112four.out$cluster)
## plotting the results using the labels and limits defined earlier
plot(dwnom80, col = k80four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "80th Congress")
points(k80four.out$centers, pch = 8, cex = 2)
## plotting the centroids
## 112th Congress
plot(dwnom112, col = k112four.out$cluster+ 1, xlab = xlab, ylab = ylab, xlim = lim, ylim = lim, main = "112th Congress")
points(k112four.out$centers, pch = 8, cex = 2)
# Wordcloud with words
# Create a word count
word_count_republic <- republic_tibble %>%
count(word, sort = T)
library(magrittr)
# Load the data for the first book:
rm(list = ls())
gutenberg_works(author == "Plato")
set.seed(6037)
wordcloud2(word_count_republic, size = 1)
# Packages for text mining/ Word cloud stuff
library(tidytext)
library(stringr)
library(dplyr)
library(rtweet)
library(wordcloud2)
library(corpus)
library(SnowballC)
library(tm)
stopwords("English")
rm(list = ls())
gutenberg_works(author == "Plato")
rm(list = ls())
gutenberg_works(author == "Plato")
# convert this to one-token-per-document-per-row
library(tidytext)
rm(list = ls())
## books with expired copyright can be brought
library(gutenbergr)
# Example of string data (from Machiavelli's The Prince)
text <- c("Every one sees what you appear to be, few really know what you are, and those few dare not oppose themselves to the opinion of the many, who have the majesty of the state to defend them...",
"For that reason, let a prince have the credit of conquering and holding his state, the means will always be considered honest, and he will be praised by everybody;",
"because the vulgar are always taken by what a thing seems to be and by what comes of it")
# To turn it into a tidy text dataset, must put it into a data frame:
library(dplyr)
text_df <- tibble(line = 1:3, text = text)
# convert this to one-token-per-document-per-row
library(tidytext)
text_df %>%
unnest_tokens(word, text)
# Load the data for the first book:
rm(list = ls())
gutenberg_works(author == "Plato")
republic_tibble <- gutenberg_download(150)
# Packages for text mining/ Word cloud stuff
library(tidytext)
library(stringr)
library(dplyr)
library(rtweet)
library(wordcloud2)
library(corpus)
# Wordcloud with words
# Create a word count
word_count_republic <- republic_tibble %>%
count(word, sort = T)
word_count_republic <- republic_tibble %>%
count(word, sort = T)
